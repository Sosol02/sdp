package com.github.onedirection.interoperability.gcalendar;

import android.accounts.Account;
import android.content.Context;
import android.util.Log;

import com.github.onedirection.utils.Monads;
import com.google.android.gms.auth.GoogleAuthUtil;
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.calendar.Calendar;
import com.google.api.services.calendar.model.CalendarList;
import com.google.api.services.calendar.model.CalendarListEntry;
import com.google.api.services.calendar.model.Event;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;

/**
 * Methods to interact with Google Calendar using our classes.
 */
public final class GoogleCalendar {

    // Don't ask my the hows-and-whys of this string, all I know is that it doesn't work otherwise
    private static final String OAUTH_SCOPE = "oauth2:profile email";
    private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();
    static final String LOGCAT_TAG = "GCalendar";

    private static final String CALENDAR_SUMMARY = "1DirectionBackup";

    private GoogleCalendar() {
    }

    public static Event toGCalendarEvents(com.github.onedirection.event.Event event) {
        // TODO: Task #207 (assigned to @Flechman)

        // Example: https://developers.google.com/calendar/v3/reference/events/insert#java
        // Doc: https://developers.google.com/resources/api-libraries/documentation/calendar/v3/java/latest/
        // Warning: use EventDateTime::setDatetime, not EventDateTime::setDate

        return null;
    }

    public static com.github.onedirection.event.Event fromGCalendarEvents(Event event) {
        // TODO: Task #???

        return null;
    }

    private static List<String> listMatchingCalendarIds(Calendar service, String summary) {
        List<String> ls = new ArrayList<>();

        try {
            String pageToken = null;
            do {
                CalendarList calendarList = service.calendarList().list().setPageToken(pageToken).execute();
                List<CalendarListEntry> items = calendarList.getItems();

                for (CalendarListEntry calendarListEntry : items) {
                    if (calendarListEntry.getSummary().equals(summary)) {
                        ls.add(calendarListEntry.getId());
                    }
                }
                pageToken = calendarList.getNextPageToken();
            } while (pageToken != null);
        } catch (Exception ignored) { /*Ignore and return empty*/ }
        return ls;
    }

    public static CompletableFuture<Void> exportEvents(Context ctx, Account account, CompletableFuture<List<com.github.onedirection.event.Event>> ls) {
        return ls.thenApply(f -> Monads.map(f, GoogleCalendar::toGCalendarEvents)).thenCompose(events ->
                // This is needed to ensure that this is not run on the main thread
                // (which is a precondition of getToken)
                CompletableFuture.runAsync(() -> {
                    int counter = 0;
                    try {
                        String token = GoogleAuthUtil.getToken(ctx, account, OAUTH_SCOPE);
                        GoogleCredential credential = new GoogleCredential().setAccessToken(token);
                        Calendar service = new Calendar.Builder(new NetHttpTransport(), JSON_FACTORY, credential)
                                .setApplicationName(ctx.getApplicationInfo().name)
                                .build();


                        // Remove matching calendars to avoid duplicates
                        List<String> ids = listMatchingCalendarIds(service, CALENDAR_SUMMARY);
                        for (String id : ids) {
                            Log.d(LOGCAT_TAG, "Deleting calendar: " + id);
                            service.calendars().delete(id).execute();
                        }


                        Log.d(LOGCAT_TAG, "Creating calendar...");
                        String calendarId = service.calendars().insert(
                                new com.google.api.services.calendar.model.Calendar()
                                        .setDescription("Calendar generated by the 1Direction app.")
                                        .setSummary(CALENDAR_SUMMARY)
                        ).execute().getId();
                        Log.d(LOGCAT_TAG, "... done (id " + calendarId + ")");


                        assert calendarId != null;

                        for (Event event : events) {
                            service.events().insert(calendarId, event).execute();
                            counter += 1;
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        Log.d(LOGCAT_TAG,
                                "Events export failed (" +
                                        counter +
                                        "/" +
                                        events.size() +
                                        " events exported): " +
                                        e.getMessage()
                        );
                    }
                }));
    }
}

